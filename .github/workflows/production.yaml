name: Vercel Production Deployment
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Prepare and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"
      - run: npm install
      - run: npm run prepare
      - run: npm run build
  cypress-run:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          build: npm run build
          start: npm start
          wait-on: "http://localhost:3000"
          config-file: cypress.config.ts
  sonarcloud:
    needs: [build, cypress-run]
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install dependencies
        run: npm i
      - name: Test and coverage
        run: npm run test
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          JEST_COVERAGE: ${{ secrets.JEST_COVERAGE }}
          EXTRA_ARGS: '-Dsonar.sources=app
            -Dsonar.tests=__tests__
            -Dsonar.exclusions="**/node_modules/**,**/*.spec.ts,**/*.cy.ts"
            -Dsonar.test.inclusions="**/testing/**,**/*.spec.ts,**/*.test.*,**/*.cy.ts"'
  Deploy-Production:
    needs: [build, sonarcloud, cypress-run]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
